{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","handleSort","newSortType","visibleGoods","goods","ALPHABET","sort","LENGTH","a","b","length","reverse","getReorderedGoods","visibleReset","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAoBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAWL,IAmBaE,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAa,SAACC,GAClBJ,EAAYI,IAYRC,EApCkB,SACxBC,EADwB,GAGpB,IADFP,EACC,EADDA,SAAUE,EACT,EADSA,WAENI,EAAY,YAAOC,GAYzB,OAVIP,IAAaL,EAASa,SACxBF,EAAaG,OACJT,IAAaL,EAASe,QAC/BJ,EAAaG,MAAK,SAACE,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UAGvCX,GACFI,EAAaQ,UAGRR,EAoBcS,CAAkBnB,EAAiB,CACtDI,WACAE,eAGIc,EAAehB,IAAaL,EAASI,MAAQG,EAEnD,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYnB,IAAaL,EAASa,WAEpCY,QAAS,kBAAMhB,EAAWT,EAASa,WALrC,iCAUA,wBACEU,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYnB,IAAaL,EAASe,SAEpCU,QAAS,kBAAMhB,EAAWT,EAASe,SALrC,4BAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAajB,IAEfkB,QA5Cc,WACpBjB,GAAeD,IAsCX,qBAUCc,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAjDU,WAClBjB,GAAc,GACdF,EAAYN,EAASI,OA4Cf,sBAUJ,6BACE,6BACGO,EAAae,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCtHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.779c7093.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nconst getReorderedGoods = (\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) => {\n  const visibleGoods = [...goods];\n\n  if (sortType === SortType.ALPHABET) {\n    visibleGoods.sort();\n  } else if (sortType === SortType.LENGTH) {\n    visibleGoods.sort((a, b) => a.length - b.length);\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n};\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const handleSort = (newSortType: SortType) => {\n    setSortType(newSortType);\n  };\n\n  const handleReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const visibleGoods = getReorderedGoods(goodsFromServer, {\n    sortType,\n    isReversed,\n  });\n\n  const visibleReset = sortType !== SortType.NONE || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={() => handleSort(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={() => handleSort(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {visibleReset && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map((good) => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}